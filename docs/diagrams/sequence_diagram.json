{"diagram_type":"sequence","metadata":{"clang_uml_version":"0.5.3","llvm_version":"clang version 18.1.1 (https://github.com/llvm/llvm-project.git dba2a75e9c7ef81fe84774ba5eee5e67e01d801a)","schema_version":2},"name":"sequence_diagram","participants":[{"activities":[{"display_name":"AppManager(QObject *)","full_name":"AppManager::AppManager(QObject *)","id":"3501980467922149598","name":"AppManager","namespace":"","source_location":{"column":13,"file":"src/AppManager/AppManager.cpp","line":3,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"method"}],"comment":{"formatted":"\n @file AppManager.h\n @brief Manages the application's UI and client handling in separate threads.\n @details This class is responsible for coordinating between the UI and the client handler,\n ensuring that the application remains responsive by running the client handling logic in a separate thread.\n ","raw":"/**\r\n * @file AppManager.h\r\n * @brief Manages the application's UI and client handling in separate threads.\r\n * @details This class is responsible for coordinating between the UI and the client handler,\r\n * ensuring that the application remains responsive by running the client handling logic in a separate thread.\r\n */"},"display_name":"AppManager","full_name":"AppManager","id":"4125011841911275123","name":"AppManager","namespace":"","source_location":{"column":7,"file":"src/AppManager/AppManager.h","line":16,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"class"},{"activities":[{"comment":{"formatted":"\n @brief Gets the singleton instance of UIManager.\n @param parent Optional parent QObject.\n @return Pointer to the UIManager instance.\n     ","raw":"/**\r\n     * @brief Gets the singleton instance of UIManager.\r\n     * @param parent Optional parent QObject.\r\n     * @return Pointer to the UIManager instance.\r\n     */"},"display_name":"getInstance(QObject *)","full_name":"UIManager::getInstance(QObject *)","id":"16646541300779742830","name":"getInstance","namespace":"","source_location":{"column":20,"file":"src/AppManager/UIManager.h","line":70,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"method"},{"comment":{"formatted":"\n @brief Private constructor for the UIManager class.\n @details Initializes UI components and connects signals and slots for handling user actions and server responses.\n @param parent Optional parent QObject.\n     ","raw":"/**\r\n     * @brief Private constructor for the UIManager class.\r\n     * @details Initializes UI components and connects signals and slots for handling user actions and server responses.\r\n     * @param parent Optional parent QObject.\r\n     */"},"display_name":"UIManager(QObject *)","full_name":"UIManager::UIManager(QObject *)","id":"13269926652018080976","name":"UIManager","namespace":"","source_location":{"column":11,"file":"src/AppManager/UIManager.h","line":46,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"method"},{"comment":{"formatted":"\n @brief Creates the login widget.\n @details Initializes and displays the login widget.\n     ","raw":"/**\r\n     * @brief Creates the login widget.\r\n     * @details Initializes and displays the login widget.\r\n     */"},"display_name":"createLoginWidget()","full_name":"UIManager::createLoginWidget()","id":"2962542704869909708","name":"createLoginWidget","namespace":"","source_location":{"column":7,"file":"src/AppManager/UIManager.h","line":114,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"method"}],"comment":{"formatted":"\n @file UIManager.h\n @brief Manages the user interface of the application.\n @details This class is responsible for creating and managing different UI widgets such as login, user, and admin widgets. It handles the navigation between these widgets and processes responses from the server.\n ","raw":"/**\r\n * @file UIManager.h\r\n * @brief Manages the user interface of the application.\r\n * @details This class is responsible for creating and managing different UI widgets such as login, user, and admin widgets. It handles the navigation between these widgets and processes responses from the server.\r\n */"},"display_name":"UIManager","full_name":"UIManager","id":"4909201866089141242","name":"UIManager","namespace":"","source_location":{"column":7,"file":"src/AppManager/UIManager.h","line":23,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"class"},{"activities":[{"display_name":"ResponseManager(QObject *)","full_name":"ResponseManager::ResponseManager(QObject *)","id":"13031679535044098174","name":"ResponseManager","namespace":"","source_location":{"column":18,"file":"src/requestModule/ResponseManager.cpp","line":24,"translation_unit":"src\\requestModule\\ResponseManager.cpp"},"type":"method"}],"comment":{"formatted":"\n @class ResponseManager\n @brief Manages the responses received from the server.\n\n The ResponseManager class processes server responses and emits signals based on the response type.\n It handles various response types defined in the AvailableRequests enum and provides feedback\n through signals to update the application state accordingly.\n ","raw":"/**\r\n * @class ResponseManager\r\n * @brief Manages the responses received from the server.\r\n *\r\n * The ResponseManager class processes server responses and emits signals based on the response type.\r\n * It handles various response types defined in the AvailableRequests enum and provides feedback\r\n * through signals to update the application state accordingly.\r\n */"},"display_name":"ResponseManager","full_name":"ResponseManager","id":"524940392191554637","name":"ResponseManager","namespace":"","source_location":{"column":7,"file":"src/requestModule/ResponseManager.h","line":17,"translation_unit":"src\\requestModule\\ResponseManager.cpp"},"type":"class"},{"activities":[{"comment":{"formatted":"\n @brief Get the singleton instance of RequestManager.\n\n @param parent The parent QObject, default is nullptr.\n @return RequestManager* Pointer to the singleton instance.\n\t ","raw":"/**\r\n\t * @brief Get the singleton instance of RequestManager.\r\n\t *\r\n\t * @param parent The parent QObject, default is nullptr.\r\n\t * @return RequestManager* Pointer to the singleton instance.\r\n\t */"},"display_name":"getInstance(QObject *)","full_name":"RequestManager::getInstance(QObject *)","id":"13070379262845949517","name":"getInstance","namespace":"","source_location":{"column":25,"file":"src/requestModule/RequestManager.h","line":61,"translation_unit":"src\\Widgets\\AdminWidget\\AdminWidget.cpp"},"type":"method"},{"comment":{"formatted":"\n @brief Private constructor to enforce Singleton pattern.\n\n @param parent The parent QObject, default is nullptr.\n\t ","raw":"/**\r\n\t * @brief Private constructor to enforce Singleton pattern.\r\n\t *\r\n\t * @param parent The parent QObject, default is nullptr.\r\n\t */"},"display_name":"RequestManager(QObject *)","full_name":"RequestManager::RequestManager(QObject *)","id":"16765164537738748326","name":"RequestManager","namespace":"","source_location":{"column":11,"file":"src/requestModule/RequestManager.h","line":40,"translation_unit":"src\\Widgets\\AdminWidget\\AdminWidget.cpp"},"type":"method"}],"comment":{"formatted":"\n @class RequestManager\n @brief Manages the creation and dispatching of requests in the system.\n\n The RequestManager class follows the Singleton design pattern to ensure that only one instance\n of the class exists throughout the application. It is responsible for creating various types\n of requests and emitting a signal to notify when a request is made.\n\n The requests are defined by the AvailableRequests enum and include operations such as user login,\n account retrieval, balance checking, transaction history, and more. The requests are created\n in the form of QJsonObject and emitted via the makeRequest signal.\n ","raw":"/**\r\n * @class RequestManager\r\n * @brief Manages the creation and dispatching of requests in the system.\r\n *\r\n * The RequestManager class follows the Singleton design pattern to ensure that only one instance\r\n * of the class exists throughout the application. It is responsible for creating various types\r\n * of requests and emitting a signal to notify when a request is made.\r\n *\r\n * The requests are defined by the AvailableRequests enum and include operations such as user login,\r\n * account retrieval, balance checking, transaction history, and more. The requests are created\r\n * in the form of QJsonObject and emitted via the makeRequest signal.\r\n */"},"display_name":"RequestManager","full_name":"RequestManager","id":"17581648629732253705","name":"RequestManager","namespace":"","source_location":{"column":7,"file":"src/requestModule/RequestManager.h","line":30,"translation_unit":"src\\Widgets\\AdminWidget\\AdminWidget.cpp"},"type":"class"},{"activities":[{"comment":{"formatted":"\n @brief Constructs a LoginWidget instance.\n @param parent The parent QWidget, defaults to nullptr.\n     ","raw":"/**\r\n     * @brief Constructs a LoginWidget instance.\r\n     * @param parent The parent QWidget, defaults to nullptr.\r\n     */"},"display_name":"LoginWidget(QWidget *)","full_name":"LoginWidget::LoginWidget(QWidget *)","id":"16684537752375038741","name":"LoginWidget","namespace":"","source_location":{"column":11,"file":"src/Widgets/LoginWidget/loginwidget.h","line":37,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"method"}],"comment":{"formatted":"\n @brief The LoginWidget class provides a user interface for logging into the banking system.\n\n The LoginWidget is responsible for user authentication, including connecting to the server,\n handling user input, and displaying appropriate feedback. It provides fields for email and\n password entry, a login button, and an indicator for connection status.\n ","raw":"/**\r\n * @brief The LoginWidget class provides a user interface for logging into the banking system.\r\n *\r\n * The LoginWidget is responsible for user authentication, including connecting to the server,\r\n * handling user input, and displaying appropriate feedback. It provides fields for email and\r\n * password entry, a login button, and an indicator for connection status.\r\n */"},"display_name":"LoginWidget","full_name":"LoginWidget","id":"9314656593254540318","name":"LoginWidget","namespace":"","source_location":{"column":7,"file":"src/Widgets/LoginWidget/loginwidget.h","line":28,"translation_unit":"src\\AppManager\\AppManager.cpp"},"type":"class"},{"activities":[{"display_name":"ClientHandler(QObject *)","full_name":"ClientHandler::ClientHandler(QObject *)","id":"1629643350774068464","name":"ClientHandler","namespace":"","source_location":{"column":16,"file":"src/Client/ClientHandler.cpp","line":12,"translation_unit":"src\\Client\\ClientHandler.cpp"},"type":"method"}],"comment":{"formatted":"\n @class ClientHandler\n @brief A class for managing client requests and responses.\n\n The ClientHandler class handles the client-side operations such as sending requests,\n receiving responses, and managing connections. It uses the TcpClient class to handle\n the actual TCP communication.\n ","raw":"/**\r\n * @class ClientHandler\r\n * @brief A class for managing client requests and responses.\r\n *\r\n * The ClientHandler class handles the client-side operations such as sending requests,\r\n * receiving responses, and managing connections. It uses the TcpClient class to handle\r\n * the actual TCP communication.\r\n */"},"display_name":"ClientHandler","full_name":"ClientHandler","id":"3891570225386253038","name":"ClientHandler","namespace":"","source_location":{"column":7,"file":"src/Client/ClientHandler.h","line":27,"translation_unit":"src\\Client\\ClientHandler.cpp"},"type":"class"}],"sequences":[{"messages":[{"from":{"activity_id":"3501980467922149598","participant_id":"4125011841911275123"},"name":"getInstance(QObject *)","return_type":"UIManager *","scope":"normal","source_location":{"column":29,"file":"src/AppManager/AppManager.cpp","line":4,"translation_unit":"src\\AppManager\\AppManager.cpp"},"to":{"activity_id":"16646541300779742830","participant_id":"4909201866089141242"},"type":"message"},{"from":{"activity_id":"16646541300779742830","participant_id":"4909201866089141242"},"name":"UIManager(QObject *)","return_type":"void","scope":"normal","source_location":{"column":35,"file":"src/AppManager/UIManager.cpp","line":36,"translation_unit":"src\\AppManager\\UIManager.cpp"},"to":{"activity_id":"13269926652018080976","participant_id":"4909201866089141242"},"type":"message"},{"from":{"activity_id":"13269926652018080976","participant_id":"4909201866089141242"},"name":"ResponseManager(QObject *)","return_type":"void","scope":"normal","source_location":{"column":24,"file":"src/AppManager/UIManager.cpp","line":7,"translation_unit":"src\\AppManager\\UIManager.cpp"},"to":{"activity_id":"13031679535044098174","participant_id":"524940392191554637"},"type":"message"},{"from":{"activity_id":"13269926652018080976","participant_id":"4909201866089141242"},"name":"getInstance(QObject *)","return_type":"RequestManager *","scope":"normal","source_location":{"column":19,"file":"src/AppManager/UIManager.cpp","line":9,"translation_unit":"src\\AppManager\\UIManager.cpp"},"to":{"activity_id":"13070379262845949517","participant_id":"17581648629732253705"},"type":"message"},{"from":{"activity_id":"13070379262845949517","participant_id":"17581648629732253705"},"name":"RequestManager(QObject *)","return_type":"void","scope":"normal","source_location":{"column":40,"file":"src/requestModule/RequestManager.cpp","line":9,"translation_unit":"src\\requestModule\\RequestManager.cpp"},"to":{"activity_id":"16765164537738748326","participant_id":"17581648629732253705"},"type":"message"},{"from":{"activity_id":"13269926652018080976","participant_id":"4909201866089141242"},"name":"createLoginWidget()","return_type":"void","scope":"normal","source_location":{"column":2,"file":"src/AppManager/UIManager.cpp","line":21,"translation_unit":"src\\AppManager\\UIManager.cpp"},"to":{"activity_id":"2962542704869909708","participant_id":"4909201866089141242"},"type":"message"},{"activity_id":"2962542704869909708","branches":[{"messages":[{"from":{"activity_id":"2962542704869909708","participant_id":"4909201866089141242"},"name":"LoginWidget(QWidget *)","return_type":"void","scope":"normal","source_location":{"column":21,"file":"src/AppManager/UIManager.cpp","line":71,"translation_unit":"src\\AppManager\\UIManager.cpp"},"to":{"activity_id":"16684537752375038741","participant_id":"9314656593254540318"},"type":"message"},{"from":{"activity_id":"16684537752375038741","participant_id":"9314656593254540318"},"name":"getInstance(QObject *)","return_type":"RequestManager *","scope":"normal","source_location":{"column":54,"file":"src/Widgets/LoginWidget/loginwidget.cpp","line":18,"translation_unit":"src\\Widgets\\LoginWidget\\loginwidget.cpp"},"to":{"activity_id":"13070379262845949517","participant_id":"17581648629732253705"},"type":"message"}],"type":"consequent"}],"name":"if","type":"alt"},{"from":{"activity_id":"3501980467922149598","participant_id":"4125011841911275123"},"name":"ClientHandler(QObject *)","return_type":"void","scope":"normal","source_location":{"column":78,"file":"src/AppManager/AppManager.cpp","line":4,"translation_unit":"src\\AppManager\\AppManager.cpp"},"to":{"activity_id":"1629643350774068464","participant_id":"3891570225386253038"},"type":"message"}],"return_type":"void","start_from":{"id":"3501980467922149598","location":"AppManager::AppManager(QObject *)"}}]}